blueprint:
  name: Tesla Smart Charge Blueprint v4 with Dual Power Sensors and Charger Switch
  description: >
    Example configuration:
      - power_consumed_sensor: sensor.power_consumed
      - power_produced_sensor: sensor.power_produced
      - charging_amps_number: number.tesla_ble_1fc6ac_charging_amps
      - charge_flap_sensor: binary_sensor.tesla_ble_1fc6ac_charge_flap
      - ble_signal_sensor: sensor.tesla_ble_1fc6ac_ble_signal
      - charger_switch: switch.tesla_ble_1fc6ac_charger_switch
      - high_threshold: 800 W
      - low_threshold: 50 W
      - very_high_threshold: 4000 W
      - polling_time_pattern: "/1"   # Triggers every minute
      - random_delay_max: 30 seconds
      - divisor: 690

    The net power is calculated as:

      net power = power_consumed - power_produced

    For additional smoothing, you can create a sensor externally using a time_simple_moving_average filter, for example:

      - platform: filter
        name: "Smoothed Power"
        entity_id: sensor.power_net
        filters:
          - filter: time_simple_moving_average
            window_size: "00:00:02"
            precision: 0

    This blueprint adjusts the Tesla charging amperage based on the calculated net power and toggles the charger switch accordingly.
  domain: automation
  input:
    power_consumed_sensor:
      name: Power Consumed Sensor
      description: Sensor measuring power consumed.
      selector:
        entity:
          domain: sensor
      default: sensor.power_consumed
    power_produced_sensor:
      name: Power Produced Sensor
      description: Sensor measuring power produced.
      selector:
        entity:
          domain: sensor
      default: sensor.power_produced
    charging_amps_number:
      name: Charging Amps Number
      description: Number entity controlling Tesla charging amperage.
      selector:
        entity:
          domain: number
      default: number.tesla_ble_1fc6ac_charging_amps
    charge_flap_sensor:
      name: Charge Flap Sensor
      description: Binary sensor indicating if the Tesla charge flap is active.
      selector:
        entity:
          domain: binary_sensor
      default: binary_sensor.tesla_ble_1fc6ac_charge_flap
    ble_signal_sensor:
      name: BLE Signal Sensor
      description: Sensor measuring the Tesla BLE signal strength.
      selector:
        entity:
          domain: sensor
      default: sensor.tesla_ble_1fc6ac_ble_signal
    charger_switch:
      name: Charger Switch
      description: Switch entity controlling the Tesla charger.
      selector:
        entity:
          domain: switch
      default: switch.tesla_ble_1fc6ac_charger_switch
    high_threshold:
      name: High Power Threshold
      description: Calculated power (W) above which the upper trigger is activated.
      default: 800
      selector:
        number:
          min: 0
          max: 10000
          unit_of_measurement: W
    low_threshold:
      name: Low Power Threshold
      description: Calculated power (W) below which the low trigger is activated.
      default: 50
      selector:
        number:
          min: 0
          max: 10000
          unit_of_measurement: W
    very_high_threshold:
      name: Very High Power Threshold
      description: Calculated power (W) above which charging is immediately disabled.
      default: 4000
      selector:
        number:
          min: 0
          max: 10000
          unit_of_measurement: W
    polling_time_pattern:
      name: Polling Time Pattern
      description: >
        Time pattern for the polling trigger. For example, "/1" triggers every minute.
      default: "/1"
      selector:
        text: {}
    random_delay_max:
      name: Random Delay Maximum (Seconds)
      description: Maximum seconds for a random delay on the polling trigger.
      default: 30
      selector:
        number:
          min: 1
          max: 120
    divisor:
      name: Divisor for Amps Adjustment
      description: Divisor used to calculate the adjustment step.
      default: 690
      selector:
        number:
          min: 1
          max: 10000

trigger:
  - platform: template
    value_template: >
      {{ (states(input.power_consumed_sensor)|float - states(input.power_produced_sensor)|float) > (input.high_threshold | float) }}
    for: "00:00:10"
    id: power_upper_trigger
  - platform: time_pattern
    minutes: !input polling_time_pattern
    id: polling_trigger
  - platform: template
    value_template: >
      {{ (states(input.power_consumed_sensor)|float - states(input.power_produced_sensor)|float) < (input.low_threshold | float) }}
    for: "00:00:01"
    id: power_low_trigger

condition:
  - condition: state
    entity_id: !input charge_flap_sensor
    state: "on"
  - condition: numeric_state
    entity_id: !input ble_signal_sensor
    above: -150

action:
  - choose:
      # Polling branch: introduce a random delay.
      - conditions:
          - condition: trigger
            id: polling_trigger
        sequence:
          - delay: "00:00:{{ range(1, (random_delay_max | int)) | random }}"
      # Low power branch: increase charging amps if below 7.
      - conditions:
          - condition: trigger
            id: power_low_trigger
        sequence:
          - choose:
              - conditions:
                  - condition: numeric_state
                    entity_id: !input charging_amps_number
                    below: 7
                sequence:
                  - service: number.set_value
                    target:
                      entity_id: !input charging_amps_number
                    data:
                      value: >
                        {{ states(input.charging_amps_number) | int + -(((states(input.power_consumed_sensor)|float - states(input.power_produced_sensor)|float) / input.divisor) | round(0)) + 1 }}
            default: []
      # Upper power branch: adjust charging amps downward or disable charging.
      - conditions:
          - condition: trigger
            id: power_upper_trigger
        sequence:
          - choose:
              - conditions:
                  - condition: template
                    value_template: >
                      {{ (states(input.power_consumed_sensor)|float - states(input.power_produced_sensor)|float) > (input.very_high_threshold | float) }}
                sequence:
                  - service: number.set_value
                    target:
                      entity_id: !input charging_amps_number
                    data:
                      value: "0"
              - conditions:
                  - condition: numeric_state
                    entity_id: !input charging_amps_number
                    above: 0
                sequence:
                  - service: number.set_value
                    target:
                      entity_id: !input charging_amps_number
                    data:
                      value: >
                        {{ [states(input.charging_amps_number) | int - (((states(input.power_consumed_sensor)|float - states(input.power_produced_sensor)|float) / input.divisor) | round(0, 'floor')), 0] | max }}
            default: []
    default: []
  - choose:
      # Toggle the charger switch based on the charging amps value.
      - conditions:
          - condition: numeric_state
            entity_id: !input charging_amps_number
            below: 1
        sequence:
          - service: switch.turn_off
            target:
              entity_id: !input charger_switch
      - conditions:
          - condition: numeric_state
            entity_id: !input charging_amps_number
            above: 0
        sequence:
          - service: switch.turn_on
            target:
              entity_id: !input charger_switch
    default: []
mode: single
